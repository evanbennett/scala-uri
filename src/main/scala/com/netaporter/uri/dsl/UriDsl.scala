package com.netaporter.uri.dsl

import com.netaporter.uri._

/**
 * Value class to add DSL functionality to Uris
 *
 * @param uri
 */
class UriDsl(val uri: Uri) extends AnyVal {

  /**
   * Adds a new Query parameter key-value pair. If the value for the Query parameter is None, then this
   * Query parameter will not be rendered in calls to toString or toStringRaw
   * @param keyValue Tuple2 representing the query parameter
   * @return A new Uri with the new Query parameter
   */
  @deprecated("Convert to the new DSL.", "1.0.0")
  def ?(keyValue: (String, Any)) = uri.queryAppend(keyValue._1, keyValue._2)

  /**
   * Adds a trailing forward slash to the path and a new Query parameter key-value pair.
   * If the value for the Query parameter is None, then this Query parameter will
   * not be rendered in calls to toString or toStringRaw
   * @param keyValue Tuple2 representing the query parameter
   * @return A new Uri with the new Query parameter
   */
  @deprecated("Convert to the new DSL.", "1.0.0")
  def /?(keyValue: (String, Any)) = /("").queryAppend(keyValue._1, keyValue._2)

  /**
   * Adds a new Query parameter key-value pair. If the value for the Query parameter is None, then this
   * Query parameter will not be rendered in calls to toString or toStringRaw
   * @param keyValue Tuple2 representing the query parameter
   * @return A new Uri with the new Query parameter
   */
  @deprecated("Convert to the new DSL.", "1.0.0")
  def &(keyValue: (String, Any)) = uri.queryAppend(keyValue._1, keyValue._2)

  /**
   * Adds a fragment to the end of the uri
   * @param fragment String representing the fragment
   * @return A new Uri with this fragment
   */
  @deprecated("Convert to the new DSL.", "1.0.0")
  def `#`(fragment: String) = uri.withFragment(fragment)

  /**
   * Appends a segment to the path of this URI
   * @param segment The segment
   * @return A new Uri with this segment appended
   */
  @deprecated("Convert to the new DSL.", "1.0.0")
  def /(segment: String) = uri.withPath(uri.path.fold(AbsolutePath(Seq(StringSegment(segment))): Path)(_.appendSegment(StringSegment(segment))))

  /**
   * Operator precedence in Scala will mean that our DSL will not always be executed left to right.
   *
   * For the operators this DSL cares about, the order will be
   *
   * (all letters)
   * &
   * :
   * /
   * `#` ?
   *
   * (see Scala Reference - 6.12.3 Infix Operations: http://www.scala-lang.org/docu/files/ScalaReference.pdf)
   *
   * To handle cases where the right hard part of the DSL is executed first, we turn that into a Uri, and merge
   * it with the left had side. It is assumed the right hand Uri is generated from this DSL only to add
   * segments, query parameters or to overwrite the fragment.
   *
   * @param other A Uri generated by more DSL to the right of us
   * @return A Uri with the right hand DSL merged into us
   */
  @deprecated("Convert to the new DSL.", "1.0.0")
  private def merge(other: Uri) =
    uri.copy(
      path = uri.path.map(path => other.path.fold(path)(path.appendSegments)).orElse(other.path),
      query = uri.query.map(query => other.query.fold(query)(query.appendParameters)).orElse(other.query),
      fragment = other.fragment.orElse(uri.fragment)
    )

  @deprecated("Convert to the new DSL.", "1.0.0")
  def /(other: Uri) =
    uri.copy(
      path = uri.path.map(path => other.path.fold(path)(path.appendSegments)).orElse {
        other.path match {
          case Some(path: RootlessPath) => AbsolutePath.option(path.segments)
          case pathOption => pathOption
        }
      },
      query = uri.query.map(query => other.query.fold(query)(otherQuery => query.withParameters(query.parameters ++ otherQuery.parameters))).orElse(other.query),
      fragment = other.fragment.orElse(uri.fragment)
    )
  @deprecated("Convert to the new DSL.", "1.0.0")
  def ?(other: Uri) = merge(other)
  @deprecated("Convert to the new DSL.", "1.0.0")
  def `#`(other: Uri) = merge(other)
  @deprecated("Convert to the new DSL.", "1.0.0")
  def &(other: Uri) = merge(other)
}
